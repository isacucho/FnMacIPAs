name: Update Fortnite Version in AltStore Source

on:
  schedule:
     - cron: '15,30,45,0 * * * *'
  workflow_dispatch:

jobs:
  update-source:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Fetch Latest Release from External Repository
      id: get_latest_release
      run: |
        # Replace 'username' and 'external-repo' with the actual values
        latest_release=$(curl -s https://api.github.com/repos/relocating/EpicGamesStoreIPA/releases/latest)
        
        # Extract version, release date, and download URL
        latest_version=$(echo "$latest_release" | jq -r '.tag_name')
        release_date=$(echo "$latest_release" | jq -r '.published_at')
        download_url=$(echo "$latest_release" | jq -r '.assets[0].browser_download_url')
        size=$(echo "$latest_release" | jq -r '.assets[0].size')

        # Set outputs for later use
        echo "::set-output name=latest_version::$latest_version"
        echo "::set-output name=release_date::$release_date"
        echo "::set-output name=download_url::$download_url"
        echo "::set-output name=size::$size"

    - name: Update source.json with new Fortnite version
      run: |
        # Read the current version in source.json
        current_version=$(jq -r '.apps[] | select(.name == "Fortnite") | .version' repo/source2.json)

        if [ "$current_version" != "${{ steps.get_latest_release.outputs.latest_version }}" ]; then
          # Add new version to the versions array
          jq --arg version "${{ steps.get_latest_release.outputs.latest_version }}" \
             --arg date "${{ steps.get_latest_release.outputs.release_date }}" \
             --arg desc "Auto-updated with the latest version" \
             --argjson size ${{ steps.get_latest_release.outputs.size }} \
             --arg download_url "${{ steps.get_latest_release.outputs.download_url }}" \
             '(.apps[] | select(.name == "Fortnite") | .versions) |= [{"version": $version, "date": $date, "localizedDescription": $desc, "size": $size, "downloadURL": $download_url}] + .' \
             repo/source2.json > tmp.json && mv tmp.json repo/source2.json

          # Update root-level fields for the Fortnite app
          jq --arg version "${{ steps.get_latest_release.outputs.latest_version }}" \
             --arg date "${{ steps.get_latest_release.outputs.release_date }}" \
             --arg download_url "${{ steps.get_latest_release.outputs.download_url }}" \
             --argjson size ${{ steps.get_latest_release.outputs.size }} \
             '(.apps[] | select(.name == "Fortnite")) |= (. + {version: $version, versionDate: $date, downloadURL: $download_url, size: $size})' \
             repo/source2.json > tmp.json && mv tmp.json repo/source2.json

          # Print the updated source.json for debugging
          cat repo/source2.json
        else
          echo "No update needed; Fortnite is already at the latest version."
        fi

    - name: Commit and Push Changes
      if: steps.get_latest_release.outputs.latest_version != ''
      run: |
        git config --local user.name "GitHub Action"
        git config --local user.email "action@github.com"
        git add repo/source2.json
        git commit -m "Update Fortnite in AltStore source to version ${{ steps.get_latest_release.outputs.latest_version }}"
        git push
